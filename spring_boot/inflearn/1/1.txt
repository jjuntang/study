스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술

------------------------------------------
---------- 프로젝트 생성 ----------
compact Middle Packages
12:42

인텔리제이에서 그레들로 실행하지 않고 자바 바로 실행, (그레들을 통하면 느림) 
15:40

---------- 라이브러리 살펴보기 ----------
spring-boot-starter-logging
logback, slf4j
9:40

테스트, junit : 테스트의 핵심, 최근에 버젼 5 사용됨
10:20

---------- VIEW 환경설정 ----------
welcome 페이지
0:35

spring boot 는 방대하기 때문에 spring.io 의 spring boot 에서 원하는 것을 찾는 능력을 키워야 한다.
2:40

탬플릿 엔진 thymeleaf 

컨트롤러 만들기
7:00 

spring-boot-devtools : 컴파일만 해주면 서버 재시작없이 view 파일 변경이 가능하다. 
13:50    

---------- 빌드하고 실행하기 ----------
빌드(맥에서)

서버 배포하기 
1:52


------------------------------------------
---------- 정적 컨텐츠 ----------
html 의미, 변하지 않는 컨텐츠 
api 방식 : json 으로 클라이언트에게 전달, 서버끼리 통신할 때도 사용 
2 : 00

---------- mvc 와 탬플릿 엔진 ----------
viewResolver
9:20

---------- api ----------
html 없이 데이터 자체 또는 json 으로 클라이언트에게 전달 

@ResponseBody : http body  에 데이터를 직접 넣어주겠다. html 이 없이 데이터가 그대로 클라이언트에 넘어감
1:15

json
5:40

자비빈 규약 : 겟터 셋터, 매서드를 통해서 접근
객체를 리턴하면 json 으로 변환 
8:07


------------------------------------------
회원관리 예제 - 백엔드 개발
---------- 비지니스 요구사항 정리 ----------

아직 데이터 저장소가 선정되지 않아서, 우선 인터페이스로 구현 클래스를 변경할 수 있도록 설계
4:10

---------- 회원 도메인과 리파저토리 만들기 ----------

1. 패키지 만들기
2. member 클래스 만들기, getter, setter 만들기 
3. 인터페이스 만들기 : repository 만들기 


public interface MemberRepository {
	Member save(Member member);
	Optional<Member> findById(Long id);
	Optional<Member> findByName(String name);
	List<Member> findAll();
}

4. 구현체 만들기 
코딩해보기 
4:00 

public class MemoryMemberRepository implements MemberRepository {
	private static Map<Long, Member> store = new HashMap<>();
	private static long sequence = 0L;
	
	@Override 
	public Member save(Member member) {
		member.setId(++sequence);
		store.put(member.getId(), member);
		return member;
	}
	
	@Override
	public Optional<Member> findById(Long id) {
		return Optional.ofNullable(store.get(id);
	}
	
	@Override
	public Optional<Member> findByName(String name) {
		return store.values().stream()
			.filter(member -> member.getName().equels(name))
			.findAny();
	}
}



Optional, java 8의 기능 
2 : 20


---------- 회원 리파서토리 테스트 케이스 작성  ---------- 
테스트 케이스 작성 
7 : 56

rename : shift + F6
8 : 8